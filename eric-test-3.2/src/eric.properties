# THE eric PROPERTIES FILE
# This file specifies values for eric run-time properties
# that may be configured by the user.
# $Header: /cvsroot/ebxmlrr/eric/conf/eric.properties,v 1.65 2007/05/25 23:26:38 psterk Exp $


# System properties used by code
# On windows 2000 it is: C:/Documents and Settings/<user> (must use forward slashes)
# On unix it is something like: /home/<user>
# Referred hereafter as <user.home>
#
# user.home

#
# The base directory for eric run time files (might include client settings too)
# Overwrites same property defined in eric-commons, now for server-side only
# Default is <user.home>/eric/<version_tag>
# Best to leave it unspecified and go with defaults.
# May be used as variable in property values when pre-fixed by $ (e.g. $eric.home )
#
#eric.home

#
# The base URL for the instance of the eric registry server
# The various endpoints such as http, soap etc. are relative to this URL.
# To override the default value change the property eric.registry.baseurl
# in build.properties file.
#
eric.registry.baseurl=http://localhost:8080/eric/registry

#
# Control whether Registry Response is signed or not
#
eric.interfaces.soap.signedResponse=true

#
# The JDBC database URL
# Do not change here. Change in build.properties
#
eric.persistence.rdb.databaseURL=jdbc:postgresql://localhost:5432/eric

#
# The JDBC database driver class
# Do not change here. Change in build.properties
#
eric.persistence.rdb.databaseDriver=org.postgresql.Driver

#
# The database user on whose behalf the connection is being made
# Do not change here. Change in build.properties
#
eric.persistence.rdb.databaseUser=eric

#
# The password of database user on whose behalf the connection is being made
# Do not change here. Change in build.properties
#
eric.persistence.rdb.databaseUserPassword=eric

#
# Enable database connections pooling support
#
eric.persistence.rdb.useConnectionPooling=false

#
# The transaction isolation level to be used (see APIDOCS for java.sql.Connection)
# Do not change here. Change in build.properties
#
eric.persistence.rdb.transactionIsolation=TRANSACTION_READ_COMMITTED

#
# Decide whether to use sql type binary or BLOB
# Oracle and HSLQDB work with BLOB, PostgreSQL requires binary.
# Do not change here. Change in build.properties
#
eric.persistence.rdb.largeBinaryType=binary

#
# Determine size of the query column in the AdhocQuery table
# Configured by setting a property as shown below in build.properties:
#
# dbAdhocQueryQueryLength=4000
#
eric.persistence.rdb.adhocQueryQueryLength=4096

#
# Set the following property to true if you are getting "Cannot get a
# connection, pool exhausted" errors.  It will help you track down where
# the code is forgetting to close conenctions.  Do not turn on in
# production use as that will affect performance and throughput negatively.
#
eric.persistence.rdb.pool.debug=false

#
# The initial connection pool size
#
eric.persistence.rdb.pool.initialSize=20

#
# The maximum connection pool size
#
eric.persistence.rdb.pool.maxSize=30

#
# The time out of getting connection pool, in seconds
#
eric.persistence.rdb.pool.connectionTimeOut=180

#
# A constant that is used to optimize the check for whether
# an object exists in the database or not.
# The larger this number, the better the performance.
# However, larger number may run into database specific limits.
#
eric.persistence.rdb.IdentifiableDAO.identifiableExistsBatchCount=100

#
# If true server will throw exceptionif a ClassificationNode has a null (unspecified) value for the "code" attribute.
# If false then server will log a warning and continue.
#
eric.persistence.rdb.ClassificationNodeDAO.CodeCannotBeNull=true

#
# Decide whether to checkURLs in external links or not
#
eric.persistence.rdb.ExternalLinkDAO.checkURLs=false

#
# Decide whether to checkURLs in service bindings or not
#
eric.persistence.rdb.ServiceBindingDAO.checkURLs=false

#
# Enable fetching of child objects of ClassificationSchemes,
# ClassificationNodes & RegistryPackages if so requested by clients.
# Clients may request fetching of child objects using a special slot on the AdhocQueryRequest.
# The slotName of this slot is defined by CanonicalConstants.CANONICAL_SLOT_GET_CHILD_OBJECTS
# and its value MUST be true.
# If set to true, queries will be slower for query results which include either of the objects.
#
it.cnr.icar.eric.server.query.fetchChildObjects=true

#
# The root directory of the repository
#
eric.repository.home=/opt/eric/3.3/data/repository

#
# The quota limit (in MB) for each user
#
eric.repository.quota=10

#
# The server side keytsore's password.
#
eric.security.keystorePassword=ebxmlrr

#
# The server side keytsore's type.
#
eric.security.keystoreType=JKS

#
# The server side keytsore's file location
#
eric.security.keystoreFile=/opt/eric/3.3/data/security/keystore.jks

#
# The number of Users cached in the authentication process
#
eric.security.userCacheSize=50

#
# Should server cache be initialized during the servlet's init() call?  If
# set to true (the default), the cache will be initialized in a separate
# thread.  This separate thread does very little unless
# ${...primeCacheEvent} is onCacheInit.  If set to false, the cache's
# initialize() method will never be called.
#
# When ${...initCacheOnServerInit} is true and ${...primeCacheEvent} is
# onCacheInit, the ServerCache primes the cache in a separate Thread to
# allow container and server to boot without waiting for cache prime to
# finish.  This is important because priming the cache may take minutes to
# complete.
#
eric.server.cache.initCacheOnServerInit=true

#
# Configure when (if ever) the server cache should be primed by preloading
# frequently accessed and well known objects.
#
# Choices are:
#   onCacheInit (default) - prime the cache when the cache's initialize()
#     method is called, if ever (see ${...initCacheOnServerInit})
#   onFirstUse - prime the cache when cache is first accessed
#   never - never prime the cache; just let cache load incrementally as
#     data is faulted in at each cache miss
#
# When ${...initCacheOnServerInit} is false, both "onCacheInit" and "never"
# result in no up-front cache priming.  These settings however remain
# slightly different in this case because the classification scheme
# sub-cache strives to keep its cache full unless ${...primeCacheEvent} is
# "never".  Many scheme-related queries will fill this sub-cache even
# without an earlier priming event.
#
eric.server.cache.primeCacheEvent=never

#
# This property configures an amount of time in milliseconds that the
# ServerCache initialization thread is blocked.  This will delay cache
# priming and related database access until (for example) the Derby Network
# Server is up and running.  The default setting below seems to
# consistently postpone cache priming until Tomcat initialization is
# complete.  This property is irrelevant unless ${...initCacheOnServerInit}
# is true and ${...primeCacheEvent} is onCacheInit.
#
eric.server.cache.primeCacheDelay=60000

#
# The number of levels of descendents caches for each ClassificationScheme in ClassificationSchemeCache
# depth of 0 means cache schemes only
# depth of 1 means cache immediate child nodes of scheme
# depth of 2 means cache immediate child nodes and grandchild nodes of scheme
# depth of -1 means cache all descendent nodes of scheme
#
# The eric.server.cache.ClassificationSchemeCache.depth serves as default for all schemes
# However, any scheme may override the default by specifying another property
#   eric.server.cache.ClassificationSchemeCache.depth.<scheme id with ':' replaced with '.'>=<scheme specific depth>
#
eric.server.cache.ClassificationSchemeCache.depth=4
eric.server.cache.ClassificationSchemeCache.depth.urn.oasis.names.tc.ebxml-regrep.classificationScheme.ObjectType=-1
eric.server.cache.ClassificationSchemeCache.depth.urn.oasis.names.tc.ebxml-regrep.classificationScheme.AssociationType=-1
eric.server.cache.ClassificationSchemeCache.depth.urn.freebxml.registry.demo.schemes.iso-ch.3166.1999=1
#Following renamed to id above for easier identification but left in case db is older demodb. Should eventually remove this.
eric.server.cache.ClassificationSchemeCache.depth.urn.uuid.fa278afc-d0fc-4c4a-abf0-9f27292ca387=1
eric.server.cache.ClassificationSchemeCache.depth.urn.freebxml.registry.demo.schemes.HL7=1
#Following renamed to id above for easier identification but left in case db is older demodb. Should eventually remove this.
eric.server.cache.ClassificationSchemeCache.depth.urn.uuid.8b078ee1-3c91-465c-9872-9b47c43d41f7=1

#
# Check whether the certificates are trusted by the trust anchors during user registration.
# You should set it to true when the server runs in production.
eric.security.validateCertificates=false

#
# The keystore storing the certificate of trust anchors
#
eric.security.trustAnchors.keystoreFile=/j2sdk1.4.1/jre/lib/security/cacerts

#
# The keystore password for accessing the trust anchors keystore
#
eric.security.trustAnchors.keystorePassword=changeit

#
# The type of trust anchors keystore. Either jks or pkcs12
#
eric.security.trustAnchors.keystoreType=jks

#
# Concrete PersistenceManager Class
#
eric.server.persistence.PersistenceManagerFactory.persistenceManagerClass=it.cnr.icar.eric.server.persistence.rdb.SQLPersistenceManagerImpl

#
# Concrete RepositoryManager Class
#
#eric.server.repository.RepositoryManagerFactory.repositoryManagerClass=it.cnr.icar.eric.server.repository.filesystem.FileSystemRepositoryManager
eric.server.repository.RepositoryManagerFactory.repositoryManagerClass=it.cnr.icar.eric.server.repository.hibernate.HibernateRepositoryManager

#
# Concrete EventManager Class
#
eric.server.event.EventManagerFactory.eventManagerClass=it.cnr.icar.eric.server.event.EventManager

#
# Turn off Association confirmation
#
eric.persistence.rdb.skipAssociationConfirmation=false

#
# Turn off reference check on RemoveObjectsRequest
# True by default as GUI tools do not allow per-request
# override.
#
eric.persistence.rdb.skipReferenceCheckOnRemove=true

#
# The id of default access control policy file
#
eric.security.authorization.defaultACP=urn:oasis:names:tc:ebxml-regrep:acp:defaultACP

#
# Optimization that avoids numerous queries
# When this falg is true, the server assumes that all objects
# that are canonical (id.startWith("urn:oasis:names:tc:ebxml-regrep:")
# use the system wide default Access Control Policy
#
eric.security.authorization.assumeCanonicalObjectsUseDefaultACP=true

#
# Following property decides whether custom Acess Control Policy feature is enabled
# - true = enabled
# - false = disbaled
#
eric.security.authorization.customAccessControlPoliciesEnabled=false

#
# Following property decides whether to enable an authorization override of the 
# access control policy to permit all read operations. This results in ~3X 
# performance gain in query operations.
# - true = enabled
# - false = disbaled
#
eric.security.authorization.enableOverride.permitAllRead=true

#
# Specifies the ids of Users that have role of RegistryAdministrators
# Add additional users by separating with '|' symbol with no intervening spaces as shown below
#
#eric.security.authorization.registryAdministrators=urn:freebxml:registry:predefinedusers:registryoperator|urn:freebxml:registry:predefinedusers:nikola|urn:uuid:bab82b84-7d63-44dd-b914-e72e0476c043
eric.security.authorization.registryAdministrators=urn:freebxml:registry:predefinedusers:registryoperator

#
# Comma-separated list of XACML AttributeFinderModule class names to be loaded
# by the XACML engine.
# Do not change unless you know what you are doing
#
eric.security.authorization.customAttributeFinderModules=it.cnr.icar.eric.server.security.authorization.RegistryAttributeFinderModule

#
# Comma-separated list of XACML PolicyFinderModule class names to be loaded
# by the XACML engine.
# Do not change unless you know what you are doing
#
eric.security.authorization.customPolicyFinderModules=it.cnr.icar.eric.server.security.authorization.RegistryPolicyFinderModule

#
# Comma-separated list of XACML Function class names to be loaded
# by the XACML engine.
# Do not change unless you know what you are doing
#
eric.security.authorization.customFunctions=it.cnr.icar.eric.server.security.authorization.ClassificationNodeCompare,it.cnr.icar.eric.server.security.authorization.AssociationExistsFunction

#
#Test user to avoid client auth
#
#eric.security.authentication.testUser=urn:freebxml:registry:predefinedusers:registryoperator

#
# Specify id for the system wide default XSLT style sheet used to transform
# Email Notification from XML to HTML for human friendly format.  This
# style sheet MUST already be loaded as an ExtrinsicObject / RepositoryItem
# in server.
#
# Use commented-out (empty) setting if you wish "old style" XML format messages.
#
#eric.server.event.defaultNotificationFormatter=
eric.server.event.defaultNotificationFormatter=urn:freebxml:registry:xslt:notificationToHTML.xsl

#
# Flag to control debugging of JavaMail code (optional).  This controls
# internal logging within JavaMail and has a very different effect from
# changes to log4j.properties.
#
eric.server.event.EmailNotifier.smtp.debug=false

#
# 'From' address (without 'mailto:') to use for email notifications Some
# smtp servers restrict what this can be.  Others do not.
#
eric.server.event.EmailNotifier.smtp.from=eric@localhost

#
# Address of SMTP server to use for email notifications.  Required.
# Commented-out settings for this and the remaining EmailNotifier.smtp
# properties are examples which may be useful when using the google smtp
# server.
#
#eric.server.event.EmailNotifier.smtp.host=smtp.gmail.com
eric.server.event.EmailNotifier.smtp.host=localhost

#
# smtp username
# Required if smtp server requires authentication
#
#eric.server.event.EmailNotifier.smtp.user=me@gmail.com
eric.server.event.EmailNotifier.smtp.user=

#
# smtp user password (optional)
# Required if smtp server requires authentication
#
#eric.server.event.EmailNotifier.smtp.password=mypassword
eric.server.event.EmailNotifier.smtp.password=

#
# smtp port (optional)
# A default is chosen by java mail if unspecified.  This default is likely
# port 25 or 465, depending on the
# ${eric.server.event.EmailNotifier.smtp.auth} setting (below).  Recommend
# an explicit choice when setting the "auth" property to anything but
# 'none' (port 25).
#
#eric.server.event.EmailNotifier.smtp.port=465
eric.server.event.EmailNotifier.smtp.port=

#
# Describe type of authentication for smtp  (optional)
# Required if smtp server requires authentication
# Choices: none | tls | ssl
#
#eric.server.event.EmailNotifier.smtp.auth=tls
eric.server.event.EmailNotifier.smtp.auth=none

#
# Email address (without 'mailto:') to which to send test email notifications
# Warning this property is used only by eric junit tests and not meant
# for end users.
#
eric.server.event.EmailNotifierTest.recipient=root@localhost

#
# Extension-point for the REST interface. Add extra URLHandlers by adding a line
# like the example below, where:
# - 'XXX' is the interface parameter in the REST request
# - MyURLHandler implements URLHandler and has a zero argument constructor.
#
# example: eric.server.interfaces.rest.extend.XXX=my.package.MyURLHandler

#
# Specifies the rim classes that will be versioned by the registry.
# Each class name is separated by the '|' symbol with no intervening spaces as shown below
# Note that versioning is currently an experimental feature and is turned off by default
# You can turn it on by specifying the property value to be non-empty as shown in the commented value
#
#eric.server.lcm.VersionManager.versionableClassList=ClassificationScheme|RegistryPackage|Service|ExtrinsicObject|ClassificationNode|Organization
eric.server.lcm.VersionManager.versionableClassList=

#
# Bypass invoking Content Management Services for cataloging and validation
# upon publish if set to true
#
it.cnr.icar.eric.server.lcm.bypassCMS=false

#
# Bypass invoking Content Management Services for content and metadata filtering 
# upon publish if set to true
#
it.cnr.icar.eric.server.query.bypassCMS=true

#
# Content Management Service classes
#
# Use properties beginning with 'eric.server.cms.classMap.' to define
# mapping from either individual services or ClassificationNodes of
# classes of services to Java classes.
#
# Examples:
# eric.server.cms.classMap.<MyServiceUUID>=<MY_CMS_CLASSNAME>
# eric.server.cms.classMap.<MyServiceTypeConceptID>=<MY_OTHER_CMS_CLASSNAME>
# ** Do not remove the line below. It can be used by build scripts to add extensions.
#eric.server.cms.classMap.

# Canonical XML Content Filtering Service
eric.server.cms.classMap.urn\:oasis\:names\:tc\:ebxml-regrep\:Service\:CanonicalXMLFilteringService=it.cnr.icar.eric.server.cms.CanonicalXMLFilteringService
# Canonical XML Content Cataloging Service
eric.server.cms.classMap.urn\:oasis\:names\:tc\:ebxml-regrep\:Service\:CanonicalXMLCatalogingService=it.cnr.icar.eric.server.cms.CanonicalXMLCatalogingService
# Canonical XML Content Validation Service
eric.server.cms.classMap.urn\:oasis\:names\:tc\:ebxml-regrep\:Service\:CanonicalXMLValidationService=it.cnr.icar.eric.server.cms.CanonicalXMLValidationService
# WSDL Cataloging Service
eric.server.cms.classMap.urn\:oasis\:names\:tc\:ebxml-regrep\:profiles\:ws\:wsdl\:cataloging\:Service\:default=it.cnr.icar.eric.server.profile.ws.wsdl.cataloger.WSDLCataloger

# Content Validation Service
eric.server.cms.classMap.urn\:oasis\:names\:tc\:ebxml-regrep\:ContentManagementService\:ContentValidationService=it.cnr.icar.eric.server.cms.ContentValidationServiceImpl
# Content Cataloging Service
eric.server.cms.classMap.urn\:oasis\:names\:tc\:ebxml-regrep\:ContentManagementService\:ContentCatalogingService=it.cnr.icar.eric.server.cms.ContentCatalogingServiceImpl

#
# QueryPlugins
#
eric.server.query.plugin.urn\:oasis\:names\:tc\:ebxml-regrep\:query\:FindObjectByIdAndType=it.cnr.icar.eric.server.query.FindByIdQueryPlugin
eric.server.query.plugin.urn\:oasis\:names\:tc\:ebxml-regrep\:query\:GetClassificationSchemesById=it.cnr.icar.eric.server.query.GetSchemesByIdQueryPlugin
eric.server.query.plugin.urn\:oasis\:names\:tc\:ebxml-regrep\:query\:ArbitraryQuery=it.cnr.icar.eric.server.query.ArbitraryQueryQueryPlugin

#
# QueryFilterPlugins
#
eric.server.query.filter.plugin.urn\:freebxml\:registry\:query\:filter\:CompressContent=it.cnr.icar.eric.server.query.CompressContentQueryFilterPlugin

#
# Reference Resolver Include Association Filters
# Only include these association types. 
# This filter has precedence over the eric.server.referenceResolver.associations.excludeFilterList.
#
#eric.server.referenceResolver.associations.includeFilterList.urn\:oasis\:names\:tc\:ebxml-regrep\:ObjectType\:RegistryObject\:ExtrinsicObject\:WSDL=urn:oasis:names:tc:ebxml-regrep:AssociationType:Imports

#
# Reference Resolver Exclude Association Filters
# Include all association types except these.
#
#eric.server.referenceResolver.associations.excludeFilterList.urn\:oasis\:names\:tc\:ebxml-regrep\:ObjectType\:RegistryObject\:ExtrinsicObject\:WSDL=urn:oasis:names:tc:ebxml-regrep:AssociationType:Contains

#
# Developer mode to bypass SQLParser
# Change only for test purposes
#
it.cnr.icar.eric.server.query.sql.SQLQueryProcessor.bypassSQLParser=false

#
# Property to reclaim used db connections allocated by Hibernate
#
#eric.repository.hibernate.reclaimUsedDBConnections=false

eric.server.query.plugin.urn\:oasis\:names\:tc\:ebxml-regrep\:query\:GetClassificationNodeByPath=it.cnr.icar.eric.server.query.GetClassificationNodeByPathQueryPlugin

/*
 * ====================================================================
 * This file is part of the ebXML Registry by Icar Cnr v3.2 
 * ("eRICv32" in the following disclaimer).
 *
 * "eRICv32" is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * "eRICv32" is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License Version 3
 * along with "eRICv32".  If not, see <http://www.gnu.org/licenses/>.
 *
 * eRICv32 is a forked, derivative work, based on:
 * 	- freebXML Registry, a royalty-free, open source implementation of the ebXML Registry standard,
 * 	  which was published under the "freebxml License, Version 1.1";
 *	- ebXML OMAR v3.2 Edition, published under the GNU GPL v3 by S. Krushe & P. Arwanitis.
 * 
 * All derivative software changes and additions are made under
 *
 * Copyright (C) 2013 Ing. Antonio Messina <messina@pa.icar.cnr.it>
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the freebxml Software Foundation.  For more
 * information on the freebxml Software Foundation, please see
 * "http://www.freebxml.org/".
 *
 * This product includes software developed by the Apache Software
 * Foundation (http://www.apache.org/).
 *
 * ====================================================================
 */

package it.cnr.icar.eric.common.security;


import java.net.URL;
import junit.framework.*;
import java.io.InputStream;
import java.security.cert.X509Certificate;

import it.cnr.icar.eric.common.security.X509Parser;


/**
 *
 * @author Diego Ballve / Digital Artefacts Europe
 */
public class X509ParserTest extends TestCase {
    
    public X509ParserTest(String testName) {
        super(testName);
    }

    protected void setUp() throws java.lang.Exception {
    }

    protected void tearDown() throws java.lang.Exception {
    }

    public static junit.framework.Test suite() {
        junit.framework.TestSuite suite = new junit.framework.TestSuite(X509ParserTest.class);
        
        return suite;
    }

    /**
     * Test of parseX509Certificate method, of class it.cnr.eric.common.security.X509Parser.
     *
     * Tries a self signed certificate generated by "keytool -export"
     */
    public void testParseX509Certificate() throws Exception {
        System.out.println("testParseX509Certificate");
        URL certUrl = getClass().getResource("/resources/security/testuser-keytool-export.crt.der");
        InputStream p12Stream = certUrl.openStream();
        assertNotNull(p12Stream);
        X509Certificate x509Cert = X509Parser.parseX509Certificate(p12Stream);
        assertNotNull(x509Cert);
    }
    
    /**
     * Test of parseX509Certificate method, of class it.cnr.eric.common.security.X509Parser.
     *
     * Tries a broke, self signed certificate generated by "keytool -export"
     */
    public void testParseX509Certificate_broken() throws Exception {
        System.out.println("testParseX509Certificate_broken");
        URL certUrl = getClass().getResource("/resources/security/testuser-keytool-export.crt.broken.der");
        InputStream p12Stream = certUrl.openStream();
        assertNotNull(p12Stream);
        try {
            @SuppressWarnings("unused")
			X509Certificate x509Cert = X509Parser.parseX509Certificate(p12Stream);
            fail("Certificate should not be parseable");
        } catch (Exception e) {
            // ok
        }
    }
    
    /**
     * Test of parseX509Certificate method, of class it.cnr.eric.common.security.X509Parser.
     *
     * Tries a self signed certificate generated by "openssh x509" from a p12 keystore
     */
    public void testParseX509Certificate_openssh() throws Exception {
        System.out.println("testParseX509Certificate_openssh");
        URL certUrl = getClass().getResource("/resources/security/diego3-p12-openssh-x509.crt.der");
        InputStream p12Stream = certUrl.openStream();
        assertNotNull(p12Stream);
        X509Certificate x509Cert = X509Parser.parseX509Certificate(p12Stream);
        assertNotNull(x509Cert);
    }
    
}

#
# The name of the eric deployment instance.
# This may be used to deploy multiple instances of eric by overriding
# this property in ant invocation as in: "ant cleandb -Deric.name=eric1"
# Do not change this property unless you are doing multi-registry deployment
#
eric.name=eric

# Distribution version. Users need not edit this.
# This string might be used as a directory name (for eric.home)
dist.version=3.3

# The directory where to initialize and save eric settings.
# 'eric.home' is used by the build script, while 'eric.home.template' is set
# to property files and used by the code and file databases (it supports the
# '$user.home' variable, for later evaluation, at run time).
# Variables should point to same location if you plan to use eric in the same
# machine where you compile it and run genKeys/createDB targets.
# Example: Fixed location
#  eric.home=/fixed/location/eric
#  eric.home.template=/fixed/location/eric
# Example: Relative to user home (with user home determined at run time in
#   eric.home.template case)
#  eric.home=${user.home}/eric
#  eric.home.template=$user.home/eric
#
# Note: eric.home.template should use $user.home (no braces)
#eric.home=${user.home}/${eric.name}/${dist.version}
#eric.home.template=$user.home/${eric.name}/${dist.version}
#eric.home=/${eric.name}/${dist.version}
#eric.home.template=/${eric.name}/${dist.version}
eric.home=/opt/${eric.name}/${dist.version}
#eric.home.template=/opt/${eric.name}/${dist.version}


#
# Base URL at which eric container is found
# The default value below may be overriden if needed
eric.container.url=http://localhost:8080

#
# The base URL to the registry server instance.
# The default value below may be overriden if needed
#
eric.registry.baseurl=${eric.container.url}/${eric.name}/registry

## Database properties
# database : Database being used *
# dbDialect : Database specific Hibernate dialect *
# dbDriverDir : Directory containing ${jdbcDriver} and ${dbDeploymentJars}
# dbLargeBinaryType : SQL Type for RepositoryItem and other binaries (blob or
#  binary) *
# dbLargeBinaryTypePropLength: length\=<length in bytes for max size for
#  repository items>
# dbAdhocQueryQueryLength: The length of the query column in the adhoc query table. Default is 4096
# dbPassword : Database password
# dbShutdownURL : URL used to checkpoint the database (Derby only currently)
# dbTransactionIsolation : The transaction isolation level to be used (support
#  varies)
# dbURL : JDBC connection URL
# dbUsername: Database username
# jdbcClassName : JDBC driver class (implements java.sql.Driver)
# jdbcDriver : JDBC driver filename
#
# * These determine the choice of SQL for the database schema since different
#   databases have different capabilities.  See the 'prepare-createdb' target.
#
# Note: dbURL should use $user.home (no braces) when referencing a local file
#
# Specify the following for deployment-specific overrides:
# dbDeploymentClass : ${jdbcClassName} override
# dbDeploymentJars : ${jdbcDriver} override (unlike ${jdbcDriver}, a pattern)
# dbDeploymentPassword : ${dbPassword} override
# dbDeploymentShutdownURL : ${dbShutdownURL} override (Derby only currently)
# dbDeploymentStartServer : start database server? (Derby only currently)
# dbDeploymentURL : ${dbURL} override
# dbDeploymentUsername : ${dbUsername} override
# dbName : directory containing dB, root for database URLs
# dbParamsFile : file of additional content for jndi-context.xml, in
#  conf/database (Derby only currently, leave unset if not needed)
#
## Choose one of the databases below:


## PostgreSQL Database
database=postgresql
dbDialect=net.sf.hibernate.dialect.PostgreSQLDialect
dbLargeBinaryType=binary
dbLargeBinaryTypePropLength=
dbName=${eric.name}
dbParamsFile=
dbPassword=eric
dbTransactionIsolation=TRANSACTION_READ_COMMITTED
dbURL=jdbc:postgresql://localhost:5432/eric
dbUsername=eric
jdbcClassName=org.postgresql.Driver
jdbcDriver=postgresql-9.2-1003.jdbc4.jar
dbDeploymentJars=${jdbcDriver}
dbShutdownURL=${dbURL}

## Oracle 9 Database
#database=oracle
#dbDialect=net.sf.hibernate.dialect.Oracle9Dialect
#dbLargeBinaryType=blob
#dbLargeBinaryTypePropLength=
#dbName=${eric.name}
#dbParamsFile=
#dbPassword=eric
#dbTransactionIsolation=TRANSACTION_READ_COMMITTED
#dbURL=jdbc:oracle:thin:@localhost:1521:${eric.name}
#dbUsername=eric
#jdbcClassName=oracle.jdbc.driver.OracleDriver
#jdbcDriver=classes12.jar
#dbDeploymentJars=${jdbcDriver}
#dbShutdownURL=${dbURL}
#
# Oracle 9 and 10 have a 4000 upper limit. Do not exceed it.
#dbAdhocQueryQueryLength=4000

## HSQLDB Database (server mode)
#database=hsqldb
#dbDialect=net.sf.hibernate.dialect.HSQLDialect
#dbLargeBinaryType=blob
#dbLargeBinaryTypePropLength=
#dbName=${eric.name}
#dbParamsFile=
#dbPassword=
#dbTransactionIsolation=TRANSACTION_READ_UNCOMMITTED
#dbURL=jdbc:hsqldb:hsql://localhost/${eric.name}
#dbUsername=sa
#jdbcClassName=org.hsqldb.jdbcDriver
#jdbcDriver=hsqldb.jar
#dbDeploymentJars=${jdbcDriver}
#dbShutdownURL=${dbURL}

## HSQLDB Database (in-process mode)
#database=hsqldb
#dbDialect=net.sf.hibernate.dialect.HSQLDialect
#dbLargeBinaryType=blob
#dbLargeBinaryTypePropLength=
#dbName=${eric.name}
#dbParamsFile=
#dbPassword=
#dbTransactionIsolation=TRANSACTION_READ_UNCOMMITTED
#dbURL=jdbc:hsqldb:$eric.home/data/registry/${eric.name}
#dbUsername=sa
#jdbcClassName=org.hsqldb.jdbcDriver
#jdbcDriver=hsqldb.jar
#dbDeploymentJars=${jdbcDriver}
#dbShutdownURL=${dbURL}

## Where to find Derby Jar files
#dbDriverDir=/opt/sun/Derby/lib

## Derby database, all modes
## Set your local.build.properties to a consistent set of properties from the 3 options below as well
#database=derby
#dbDialect=it.cnr.eric.server.repository.hibernate.DerbyDialect
#dbDialect=org.hibernate.dialect.DerbyDialect
#dbLargeBinaryType=blob
#dbLargeBinaryTypePropLength=length\="2147483647"
#dbName=${eric.home}/data/registry/${eric.name}
#dbParamsFile=derby-params.template
## ??? Derby docs recommend TRANSACTION_READ_COMMITTED
#dbTransactionIsolation=TRANSACTION_READ_UNCOMMITTED

## Derby Database, embedded mode everywhere
#dbDeploymentJars=derby.jar, derbyLocale*.jar
#dbPassword=
#dbShutdownURL=jdbc:derby:${dbName};shutdown=true
#dbURL=jdbc:derby:${dbName};create=true
#dbUsername=
#jdbcClassName=org.apache.derby.jdbc.EmbeddedDriver
#jdbcDriver=derby-10.10.1.1.jar
## to start dB server in deployment container (not that client mode will be used
## anywhere by default), include the following in local.build.properties as well
#dbDeploymentJars=derby.jar, derbyLocale*.jar, derbynet.jar
#dbDeploymentStartServer=true

## Derby Database, client mode everywhere
#dbPassword=app
#dbShutdownURL=jdbc:derby://localhost:1527/${dbName};shutdown=true
#dbURL=jdbc:derby://localhost:1527/${dbName};create=true
#dbUsername=APP
#jdbcClassName=org.apache.derby.jdbc.ClientDriver
#jdbcDriver=derbyclient.jar
## to start dB server (which must be running somewhere for this deployment
## configuration to operate) in deployment container, include the following
## in local.build.properties as well
#dbDeploymentJars=derbyclient.jar, derby.jar, derbyLocale*.jar, derbynet.jar
#dbDeploymentStartServer=true

## Derby Database, embedded mode for deployment, dB server running in the
## same container (note /must/ be running in same container since no other
## process will be able to access the database), client otherwise
#dbDeploymentClass=org.apache.derby.jdbc.EmbeddedDriver
#dbDeploymentJars=derby.jar, derbyLocale*.jar, derbynet.jar
#dbDeploymentPassword=
#dbDeploymentShutdownURL=jdbc:derby:${dbName};shutdown=true
#dbDeploymentStartServer=true
#dbDeploymentURL=jdbc:derby:${dbName};create=true
#dbDeploymentUsername=
#dbPassword=app
#dbShutdownURL=jdbc:derby://localhost:1527/${dbName};shutdown=true
#dbURL=jdbc:derby://localhost:1527/${dbName};create=true
#dbUsername=APP
#jdbcClassName=org.apache.derby.jdbc.ClientDriver
#jdbcDriver=derbyclient.jar

## MySQL Database
## MySQL JDBC driver not included in eric CVS or distro
## Manually download mysql-connector and copy jar to misc/lib
#database=mysql
#dbDialect=net.sf.hibernate.dialect.MySQLDialect
#dbLargeBinaryType=blob
#dbLargeBinaryTypePropLength=
#dbName=${eric.name}
#dbParamsFile=
#dbPassword=
#dbTransactionIsolation=TRANSACTION_READ_UNCOMMITTED
#dbURL=jdbc:mysql://localhost/${eric.name}
#dbUsername=root
#jdbcClassName=com.mysql.jdbc.Driver
#jdbcDriver=mysql-connector-java-3.1.12-bin.jar
#dbDeploymentJars=${jdbcDriver}
#dbShutdownURL=${dbURL}

#
#Used in calls to SOAPSender in build.xml
#Set to true if you want to run createDemoDB without Tomcat running (default)
#Set to false otherwise
localCall=true

## ${eric.server.cache.primeCacheEvent} value used in deployed eric
## instance. If possible use default "onCacheInit" in production as it performs better.
##
## "onFirstUse" is primarily for eric development team. It allows
## container to run while an embedded database is re-created.
##
## Important:
## When localCall is false then the value MUST be "onFirstUse" in your local.build.properties.
## When localCall is true then the value SHOULD be "onCacheInit" (default).
##
## See eric.properties for additional comments on this setting.
primeCacheEvent=onCacheInit

# Used to control apache common logging.
# This only affects runSOAPSender and some of the build-nb4.xml targets and
# *does not* affect a deployed eric.
#
# Use NoOpLog by default so junit tests are not verbose.
# TODO: Make junit tests use a different log4.properties and
# send output to a separate file to allow the default
# here to be Log4JLogger in future.
#
# Use Log4JLogger to have logging output and control that output
# using conf/log4j.properties. This is useful when debugging.
#
# Use SimpleLog if for some reason the deployment does not have Log4J
# and logging is desired.
#
#
#apacheLog=org.apache.commons.logging.impl.SimpleLog
#apacheLog=org.apache.commons.logging.impl.Log4JLogger
apacheLog=org.apache.commons.logging.impl.NoOpLog

# HTTP Proxy settings
proxyHost=
proxyPort=80
# a '|' delimited list of host names to connect to directly
#nonProxyHosts=
#socksProxyHost=
#socksProxyPort=1080

# Set to true to include the <security-constraints> tag in the web.xml file.
# This will instruct the web container to require that users authenticate
# to access the ebxmlrr web client.
deployWithSecurityConstraints=false

# The role that users must be assigned to in the web container's user list in
# order to access the ebxmlrr web client. If deployWithSecurityConstraints=true,
# then this must be set.
#authConstraintRoleName=ebxmlrr-user

# The login name to use for users who login to a secure ebxmlrr web client
# using the Guest option. The user specified here must exist in the web container's
# user list. If deployWithSecurityConstraints=true, then this must be set.
#guestPrincipalName=RegistryGuest

ant.home=/usr/local/apache-ant-1.9.2
libs.ant.jar=${ant.home}/lib/ant.jar
libs.ant-junit.jar=${ant.home}/lib/ant-junit.jar
libs.ant-launcher.jar=${ant.home}/lib/ant-launcher.jar
